#!/bin/bash
# nailgunner
# A bash script to enable convenient access to `nailgun`.
#
# Ted Tibbetts <intuited à j'y aimé à y elle point com>
# License: This file is copyright 2010 Ted Tibbetts and is licensed under
#   version 3 of the GNU Public License: "http://www.gnu.org/copyleft/gpl.html"
#
function nailgunner_help {
    case "$1" in
        general) help_general;;
        topics) help_topics;;
        required) help_required;;
        overridable) help_overridable;;
        optional) help_optional;;
        *) help_topics;;
    esac;
}

function help_general {
    cat <<EOF
Usage:
    nailgunner [-i] COMMAND [ARGS]

Options:
    -i:     Use INTERACTIVE mode via rlwrap or jline.

COMMANDs:
    shoot:  Launches a client, starting a server if needed.
    load:   Loads a new nailgun server.  Called by \`nailgunner shoot\`.
    fire:   Launches a nailgun client to an existing server;
              returns $NAILGUN_CONNECT_FAILED on failed connection.
            Also called by \`nailgunner shoot\`.
    help:   Get more information on the \`nailgunner\` client.

Any additional arguments are passed to the client invocation
  or, if the \`load\` command has been given, ignored.
EOF
}

function help_topics {
    cat <<EOF
nailgunner help TOPIC

TOPICs:
    general:      General usage information
    required:     Required environment variables
    overridable:  Overridable environment variables
    optional:     Optional environment variables
EOF
}


# Required options and help for them

function help_required {
    local action;
    for action in $@; do
        help_${action}_required;
    done;
}
function _nailgunner_init_required {
    local action;
    for action in $@; do
        _nailgunner_${action}_init_required || return $?;
    done;
}

function help_load_required {
    cat << EOF
Required server environment variables:

    NAILGUN_CLASSPATH: the classpath to nailgun's classes

EOF
}
function _nailgunner_load_init_required {
    _nailgunner_env_require NAILGUN_CLASSPATH;
}

function help_fire_required {
    cat << EOF
Required client environment variables:

    NAILGUN_CLIENT: path/filename to the compiled nailgun client executable

EOF
}
function _nailgunner_fire_init_required {
    _nailgunner_env_require NAILGUN_CLIENT;
}


# Overridable environment variable help and init

function help_overridable {
    local action;
    for action in $@; do
        help_${action}_overridable;
    done;
}
function help_load_overridable {
    cat << EOF
Overridable server environment variables (those with default values):

    NAILGUN_MAIN:      The Java class which serves as an entry point
                         for the nailgun server.
                       Defaults to com.martiansoftware.nailgun.NGServer

    NAILGUN_INTERFACE: The interface on which the nailgun server will listen.
                       Defaults to 127.0.0.1

EOF
}
function help_fire_overridable {
    cat << EOF
Overridable client environment variables:

    JLINE_CLASS:     If readline is not found, and JLINE_CLASSPATH is given,
                       INTERACTIVE clients will use this as the entry point.
                     By default, the class jline.ConsoleRunner will be used.

EOF
}

function _nailgunner_init_overridable {
    local action;
    for action in $@; do
        _nailgunner_${action}_init_overridable || return $?;
    done;
}
function _nailgunner_load_init_overridable {
    NAILGUN_MAIN="${NAILGUN_MAIN:-com.martiansoftware.nailgun.NGServer}";
}

function _nailgunner_fire_init_overridable {
    JLINE_CLASS="${JLINE_CLASS:-jline.ConsoleRunner}";
    NAILGUN_INTERFACE=${NAILGUN_INTERFACE:-127.0.0.1};
}


# Optional environment variable help and init

function help_optional {
    cat <<EOF
Environment variables optional for both the client and server:

    NAILGUN_PORT: The port which will be used by the server and the client.
                  If not given, \`nailgun\` will use its default port (2113).

    NAILGUN_RETRY_PAUSE: The delay between retries
                           to connect to a newly started server
    NAILGUN_RETRIES:     The number of attempts to connect
                           to a newly started server

EOF
    local action;
    for action in $@; do
        help_${action}_optional;
    done;
}
function help_load_optional {
    true;
}
function help_fire_optional {
    cat <<EOF
Optional client environment variables:

    BOOTCLASSPATH: the first entry in the classpath
    CLASSPATH: the classpath to be used by the nailgun server

    RLWRAP: If given, this command will be prepended to client command lines.
            If \`-i\` is specified, and this is not given,
              and \`rlwrap\` is found in the path, \`rlwrap\` will be used.
    RLWRAP_COMMAND:  If given, the rlwrap command will be
                       \`\$RLWRAP -C \$RLWRAP_COMMAND\`.
                     This will determine the readline history filename.

    JLINE_CLASSPATH: The classpath to a jar containing jline.
                     Required in order to use it.

    JAVA_MAIN: The main class to be executed by nailgun.
               If not given, the first command line argument will be used.

EOF
}

function _nailgunner_init_action {
    local action;
    for action in $@; do
        _nailgunner_init_${action}_action;
    done;
}
function _nailgunner_init_load_action {
    SERVER_OUT=$(mktemp) || return 1;
    SERVER_ERR=$(mktemp) || return 1;

    function nailgunner_load {
        java $JAVA_OPTS $NARWHAL_JAVA_ARGUMENTS -cp "$NAILGUN_CLASSPATH:$BOOTCLASSPATH:$CLASSPATH" "$NAILGUN_MAIN" $NAILGUN_PORT > "$SERVER_OUT" 2>"$SERVER_ERR"
    }
}
function _nailgunner_init_fire_action {
    # Build the client launch function

    if [[ $INTERACTIVE ]]; then
        if _nailgunner_use_rlwrap; then
            function nailgunner_fire {
                $NAILGUNNER_RLWRAP "$NAILGUN_CLIENT" $JAVA_MAIN "$@"
            };
        else
            function nailgunner_fire {
                "$NAILGUN_CLIENT" $JLINE_CLASS $JAVA_MAIN "$@"
            };
        fi;
    else
        function nailgunner_fire {
            "$NAILGUN_CLIENT" $JAVA_MAIN "$@"
        };
    fi;
}

function _nailgunner_init {
    _nailgunner_init_required "$@"    || { help_required "$@"    && return 10; }
    _nailgunner_init_overridable "$@" || { help_overridable "$@" && return 11; }
    _nailgunner_init_action "$@";
}

# TODO: ? maybe add logging capabilities?


# Constants
NAILGUN_CONNECT_FAILED=230;


# Utility functions

function _nailgunner_join_classpaths {
    local IFS=:;
    echo "$*";
}

function _nailgunner_env_require {
    for env_var in $@; do
        [[ ${!env_var} ]] || {
            echo "Required environment variable $env_var not supplied.";
            echo;
            help_required >&2;
            return 1;
        } >&2;
    done;
}


# Logic

function _nailgunner_find_rlwrap {
    [[ $RLWRAP ]] && echo "$RLWRAP" && return;

    RLWRAP="$(which rlwrap)";
    if [ -x "$RLWRAP" ]; then
        [[ $RLWRAP_COMMAND ]] && RLWRAP="$RLWRAP -C $RLWRAP_COMMAND";
        return true;
    fi;
    return false;
}

function _nailgunner_use_rlwrap {
    [[ $INTERACTIVE ]] && _nailgunner_find_rlwrap;
}

function _nailgunner_has_jline {
    [[ $JLINE_CLASSPATH ]];
}

function _nailgunner_use_jline {
    [[ $INTERACTIVE ]] && ! _nailgunner_use_rlwrap \
        && _nailgunner_has_jline;
}
    

# Ensure that the running nailgun has all necessary classes
function nailgunner_check_ammo {
    # TODO: Check to see if it's okay to add a duplicate classpath entry
    #         with `ng-cp`.
    #       The idea here is to add any classpath elements
    #         that are not already loaded into the nailgun.
    #       This is sort of complicated because it means that
    #         the first client connection needs to invoke `ng-cp`.
    #       Probably this will involve calling this function
    #         from both nailgunner_shoot and nailgunner_fire.
    #       That's complicated because it means refactoring nailgunner_fire
    #         into a subsidiary function.
    true;
}


function nailgunner_shoot {
    # Connects a client, launching the server if necessary.

    # First try to connect to an existing server instance
    nailgunner_fire "$@";
    local ret=$?;
    (( $ret != $NAILGUN_CONNECT_FAILED )) && return $?;

    declare -i child_death_count=0
    declare -i more_retries=$NAILGUN_RETRIES

    # Discover if the server has terminated early.
    # This is not really necessary but will save some time
    #   in cases of server failure
    #   by avoiding repeated connection retries to the failed server.
    trap "let child_death_count += 1" SIGCHLD
    echo "Launching nailgun server..." >&2
    nailgunner_load &

    while (( $child_death_count == 0 )) && (( $more_retries > 0 )); do
        # TODO: Figure out a way to clean up the temp files
        #         after the server completes.
        #       I think these files can actually be rm'd right away,
        #         but that might be filesystem-dependent.
        #       For extra points, rewrite this routine
        #         in a language that doesn't need temp files for this.
        nailgunner_fire "$@";
        local ret=$?;
        (( $ret != $NAILGUN_CONNECT_FAILED )) && return $?;
        # Mourn the death of the fired nail
        let child_death_count -= 1;
        let more_retries -= 1;
        sleep NAILGUN_RETRY_PAUSE;
    done

    trap SIGCHLD;

    # Post-mortem
    if (( $child_death_count )); then
        echo "Nailgun server terminated early."
    else
        echo "Failed to connect to nailgun server."
    fi

    echo "Output:"
    cat "$SERVER_OUT" | sed 's/^/    /'
    echo "Error:"
    cat "$SERVER_ERR" | sed 's/^/    /'
    rm "$SERVER_OUT" "$SERVER_ERR"
    return 1
}


function route {
    [[ $1 == -i ]] && INTERACTIVE=1 && shift;
    ACTION=$1; shift;
    case $ACTION in
        help)  nailgunner_help "$@";;
        fire)  _nailgunner_init fire && nailgunner_fire "$@";;
        load)  _nailgunner_init load && nailgunner_load "$@";;
        shoot) _nailgunner_init fire load && nailgunner_shoot "$@";;
        *) help_general;;
    esac;
}

route "$@"
